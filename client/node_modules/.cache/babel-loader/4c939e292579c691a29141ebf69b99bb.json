{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bank-Dashboard-App-master\\\\client\\\\src\\\\components\\\\dashboard\\\\DonutChart.js\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nconst width = 300;\nconst height = 200;\n\nclass DonutChart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.donutChart();\n  }\n\n  donutChart() {\n    const data = [4, 4, 6, 10];\n    let formatPercent = d3.format(\".0%\"),\n        progress = 0,\n        allocated = 200000,\n        total = 420000;\n    const svg = d3.selectAll(\".svg\"),\n          width = svg.attr(\"width\"),\n          height = svg.attr(\"height\"),\n          radius = Math.min(width, height) / 2,\n          g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n    const color = d3.scaleOrdinal([\"#6AD2E6\", \"#5de61e\", \"#eb4888\", \"#922786\"]);\n    const pie = d3.pie();\n    const arc = d3.arc().innerRadius(95).outerRadius(radius);\n    const arcs = g.selectAll(\"arc\").data(pie(data)).enter().append(\"g\").attr(\"class\", \"arc\");\n    const i = d3.interpolate(progress, allocated / total);\n    const percentage = arcs.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"percentage-complete\").attr(\"dy\", \".3em\");\n    d3.transition().duration(1000).tween(\"progress\", () => {\n      return t => {\n        progress = i(t);\n        percentage.text(formatPercent(progress));\n      };\n    });\n    arcs.append(\"path\").attr(\"fill\", (d, i) => {\n      return color(i);\n    }).attr(\"d\", arc);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"svg\",\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default DonutChart;","map":{"version":3,"sources":["D:/Bank-Dashboard-App-master/client/src/components/dashboard/DonutChart.js"],"names":["React","d3","width","height","DonutChart","Component","state","componentDidMount","donutChart","data","formatPercent","format","progress","allocated","total","svg","selectAll","attr","radius","Math","min","g","append","color","scaleOrdinal","pie","arc","innerRadius","outerRadius","arcs","enter","i","interpolate","percentage","transition","duration","tween","t","text","d","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst width = 300;\nconst height = 200;\n\nclass DonutChart extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.donutChart();\n  }\n\n  donutChart() {\n    const data = [4, 4, 6, 10];\n    let formatPercent = d3.format(\".0%\"),\n      progress = 0,\n      allocated = 200000,\n      total = 420000;\n\n    const svg = d3.selectAll(\".svg\"),\n      width = svg.attr(\"width\"),\n      height = svg.attr(\"height\"),\n      radius = Math.min(width, height) / 2,\n      g = svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n    const color = d3.scaleOrdinal([\"#6AD2E6\", \"#5de61e\", \"#eb4888\", \"#922786\"]);\n    const pie = d3.pie();\n    const arc = d3\n      .arc()\n      .innerRadius(95)\n      .outerRadius(radius);\n\n    const arcs = g\n      .selectAll(\"arc\")\n      .data(pie(data))\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"arc\");\n\n    const i = d3.interpolate(progress, allocated / total);\n\n    const percentage = arcs\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"class\", \"percentage-complete\")\n      .attr(\"dy\", \".3em\");\n\n    d3.transition()\n      .duration(1000)\n      .tween(\"progress\", () => {\n        return t => {\n          progress = i(t);\n          percentage.text(formatPercent(progress));\n        };\n      });\n\n    arcs\n      .append(\"path\")\n      .attr(\"fill\", (d, i) => {\n        return color(i);\n      })\n      .attr(\"d\", arc);\n  }\n\n  render() {\n    return <svg className=\"svg\" width={width} height={height} />;\n  }\n}\n\nexport default DonutChart;\n"]},"metadata":{},"sourceType":"module"}