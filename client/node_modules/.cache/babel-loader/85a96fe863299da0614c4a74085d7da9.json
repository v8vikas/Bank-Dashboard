{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bank-Dashboard-App-master\\\\client\\\\src\\\\components\\\\dashboard\\\\LineChart.js\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../../data/scale\";\n\nclass LineChart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.lineGenerator();\n  }\n\n  lineGenerator() {\n    const line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));\n    const points = [[40, 80], [100, 100], [200, 30], [300, 40], [400, 10], [450, 5]];\n    const pathData = line(points);\n    d3.select(\"path\").attr(\"d\", pathData);\n    const canvas = d3.select(\".canvas\").append(\"svg\").attr(\"width\", 450).attr(\"height\", 450);\n    const margin = {\n      top: 10,\n      right: 40,\n      bottom: 0,\n      left: 40\n    };\n    const graphWidth = 180 - margin.left - margin.right;\n    const graphHeight = 180 - margin.top - margin.bottom;\n    const graph = canvas.append(\"g\").attr(\"width\", graphWidth).attr(\"height\", graphHeight).attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n    const xAxisGroup = graph.append(\"g\").attr(\"transform\", `translate(0, ${graphHeight})`);\n    const yAxisGroup = graph.append(\"g\");\n    const y = d3.scaleLinear().domain([0, d3.max(data, d => d.graph)]).range([graphHeight, 0]);\n    const x = d3.scaleBand().domain(data.map(item => item.month)).range([0, 400]).paddingInner(0.2).paddingOuter(0.2);\n    const xAxis = d3.axisBottom(x);\n    const yAxis = d3.axisLeft(y).ticks(5).tickFormat(d => d);\n    xAxisGroup.call(xAxis);\n    yAxisGroup.call(yAxis); // Also draw points for reference\n\n    d3.select(\"svg\").selectAll(\"circle\").data(points).enter().append(\"circle\").attr(\"x\", d => x(d.month)).attr(\"y\", graphHeight).attr(\"height\", graphHeight - y(data.map(d => d.graph))).attr(\"cx\", d => {\n      return d[0];\n    }).attr(\"cy\", d => {\n      return d[1];\n    }).attr(\"r\", 3);\n  }\n\n  render() {\n    const width = 475;\n    const height = 200;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"canvas\",\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      className: \"line-chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default LineChart;","map":{"version":3,"sources":["D:/Bank-Dashboard-App-master/client/src/components/dashboard/LineChart.js"],"names":["React","d3","data","LineChart","Component","state","componentDidMount","lineGenerator","line","curve","curveCatmullRom","alpha","points","pathData","select","attr","canvas","append","margin","top","right","bottom","left","graphWidth","graphHeight","graph","xAxisGroup","yAxisGroup","y","scaleLinear","domain","max","d","range","x","scaleBand","map","item","month","paddingInner","paddingOuter","xAxis","axisBottom","yAxis","axisLeft","ticks","tickFormat","call","selectAll","enter","render","width","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B,EAD8B;AAAA;;AAGtCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,aAAL;AACD;;AAEDA,EAAAA,aAAa,GAAG;AACd,UAAMC,IAAI,GAAGP,EAAE,CAACO,IAAH,GAAUC,KAAV,CAAgBR,EAAE,CAACS,eAAH,CAAmBC,KAAnB,CAAyB,GAAzB,CAAhB,CAAb;AACA,UAAMC,MAAM,GAAG,CACb,CAAC,EAAD,EAAK,EAAL,CADa,EAEb,CAAC,GAAD,EAAM,GAAN,CAFa,EAGb,CAAC,GAAD,EAAM,EAAN,CAHa,EAIb,CAAC,GAAD,EAAM,EAAN,CAJa,EAKb,CAAC,GAAD,EAAM,EAAN,CALa,EAMb,CAAC,GAAD,EAAM,CAAN,CANa,CAAf;AASA,UAAMC,QAAQ,GAAGL,IAAI,CAACI,MAAD,CAArB;AAEAX,IAAAA,EAAE,CAACa,MAAH,CAAU,MAAV,EAAkBC,IAAlB,CAAuB,GAAvB,EAA4BF,QAA5B;AAEA,UAAMG,MAAM,GAAGf,EAAE,CACda,MADY,CACL,SADK,EAEZG,MAFY,CAEL,KAFK,EAGZF,IAHY,CAGP,OAHO,EAGE,GAHF,EAIZA,IAJY,CAIP,QAJO,EAIG,GAJH,CAAf;AAMA,UAAMG,MAAM,GAAG;AACbC,MAAAA,GAAG,EAAE,EADQ;AAEbC,MAAAA,KAAK,EAAE,EAFM;AAGbC,MAAAA,MAAM,EAAE,CAHK;AAIbC,MAAAA,IAAI,EAAE;AAJO,KAAf;AAMA,UAAMC,UAAU,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KAA9C;AACA,UAAMI,WAAW,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAA9C;AAEA,UAAMI,KAAK,GAAGT,MAAM,CACjBC,MADW,CACJ,GADI,EAEXF,IAFW,CAEN,OAFM,EAEGQ,UAFH,EAGXR,IAHW,CAGN,QAHM,EAGIS,WAHJ,EAIXT,IAJW,CAIN,WAJM,EAIQ,aAAYG,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAJ/C,CAAd;AAMA,UAAMO,UAAU,GAAGD,KAAK,CACrBR,MADgB,CACT,GADS,EAEhBF,IAFgB,CAEX,WAFW,EAEG,gBAAeS,WAAY,GAF9B,CAAnB;AAGA,UAAMG,UAAU,GAAGF,KAAK,CAACR,MAAN,CAAa,GAAb,CAAnB;AACA,UAAMW,CAAC,GAAG3B,EAAE,CACT4B,WADO,GAEPC,MAFO,CAEA,CAAC,CAAD,EAAI7B,EAAE,CAAC8B,GAAH,CAAO7B,IAAP,EAAa8B,CAAC,IAAIA,CAAC,CAACP,KAApB,CAAJ,CAFA,EAGPQ,KAHO,CAGD,CAACT,WAAD,EAAc,CAAd,CAHC,CAAV;AAIA,UAAMU,CAAC,GAAGjC,EAAE,CACTkC,SADO,GAEPL,MAFO,CAEA5B,IAAI,CAACkC,GAAL,CAASC,IAAI,IAAIA,IAAI,CAACC,KAAtB,CAFA,EAGPL,KAHO,CAGD,CAAC,CAAD,EAAI,GAAJ,CAHC,EAIPM,YAJO,CAIM,GAJN,EAKPC,YALO,CAKM,GALN,CAAV;AAOA,UAAMC,KAAK,GAAGxC,EAAE,CAACyC,UAAH,CAAcR,CAAd,CAAd;AACA,UAAMS,KAAK,GAAG1C,EAAE,CACb2C,QADW,CACFhB,CADE,EAEXiB,KAFW,CAEL,CAFK,EAGXC,UAHW,CAGAd,CAAC,IAAIA,CAHL,CAAd;AAKAN,IAAAA,UAAU,CAACqB,IAAX,CAAgBN,KAAhB;AACAd,IAAAA,UAAU,CAACoB,IAAX,CAAgBJ,KAAhB,EA1Dc,CA4Dd;;AACA1C,IAAAA,EAAE,CAACa,MAAH,CAAU,KAAV,EACGkC,SADH,CACa,QADb,EAEG9C,IAFH,CAEQU,MAFR,EAGGqC,KAHH,GAIGhC,MAJH,CAIU,QAJV,EAKGF,IALH,CAKQ,GALR,EAKaiB,CAAC,IAAIE,CAAC,CAACF,CAAC,CAACM,KAAH,CALnB,EAMGvB,IANH,CAMQ,GANR,EAMaS,WANb,EAOGT,IAPH,CAOQ,QAPR,EAOkBS,WAAW,GAAGI,CAAC,CAAC1B,IAAI,CAACkC,GAAL,CAASJ,CAAC,IAAIA,CAAC,CAACP,KAAhB,CAAD,CAPjC,EAQGV,IARH,CAQQ,IARR,EAQciB,CAAC,IAAI;AACf,aAAOA,CAAC,CAAC,CAAD,CAAR;AACD,KAVH,EAWGjB,IAXH,CAWQ,IAXR,EAWciB,CAAC,IAAI;AACf,aAAOA,CAAC,CAAC,CAAD,CAAR;AACD,KAbH,EAcGjB,IAdH,CAcQ,GAdR,EAca,CAdb;AAeD;;AAEDmC,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,GAAd;AACA,UAAMC,MAAM,GAAG,GAAf;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,KAAK,EAAED,KAA/B;AAAsC,MAAA,MAAM,EAAEC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AA7FqC;;AAgGxC,eAAejD,SAAf","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../../data/scale\";\n\nclass LineChart extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.lineGenerator();\n  }\n\n  lineGenerator() {\n    const line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));\n    const points = [\n      [40, 80],\n      [100, 100],\n      [200, 30],\n      [300, 40],\n      [400, 10],\n      [450, 5]\n    ];\n\n    const pathData = line(points);\n\n    d3.select(\"path\").attr(\"d\", pathData);\n\n    const canvas = d3\n      .select(\".canvas\")\n      .append(\"svg\")\n      .attr(\"width\", 450)\n      .attr(\"height\", 450);\n\n    const margin = {\n      top: 10,\n      right: 40,\n      bottom: 0,\n      left: 40\n    };\n    const graphWidth = 180 - margin.left - margin.right;\n    const graphHeight = 180 - margin.top - margin.bottom;\n\n    const graph = canvas\n      .append(\"g\")\n      .attr(\"width\", graphWidth)\n      .attr(\"height\", graphHeight)\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    const xAxisGroup = graph\n      .append(\"g\")\n      .attr(\"transform\", `translate(0, ${graphHeight})`);\n    const yAxisGroup = graph.append(\"g\");\n    const y = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, d => d.graph)])\n      .range([graphHeight, 0]);\n    const x = d3\n      .scaleBand()\n      .domain(data.map(item => item.month))\n      .range([0, 400])\n      .paddingInner(0.2)\n      .paddingOuter(0.2);\n\n    const xAxis = d3.axisBottom(x);\n    const yAxis = d3\n      .axisLeft(y)\n      .ticks(5)\n      .tickFormat(d => d);\n\n    xAxisGroup.call(xAxis);\n    yAxisGroup.call(yAxis);\n\n    // Also draw points for reference\n    d3.select(\"svg\")\n      .selectAll(\"circle\")\n      .data(points)\n      .enter()\n      .append(\"circle\")\n      .attr(\"x\", d => x(d.month))\n      .attr(\"y\", graphHeight)\n      .attr(\"height\", graphHeight - y(data.map(d => d.graph)))\n      .attr(\"cx\", d => {\n        return d[0];\n      })\n      .attr(\"cy\", d => {\n        return d[1];\n      })\n      .attr(\"r\", 3);\n  }\n\n  render() {\n    const width = 475;\n    const height = 200;\n    return (\n      <svg className=\"canvas\" width={width} height={height}>\n        <path className=\"line-chart\" />\n      </svg>\n    );\n  }\n}\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}