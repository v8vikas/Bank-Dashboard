{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactLoadScript = require('react-load-script');\n\nvar _reactLoadScript2 = _interopRequireDefault(_reactLoadScript);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PlaidLink = function (_Component) {\n  _inherits(PlaidLink, _Component);\n\n  function PlaidLink(props) {\n    _classCallCheck(this, PlaidLink);\n\n    var _this = _possibleConstructorReturn(this, (PlaidLink.__proto__ || Object.getPrototypeOf(PlaidLink)).call(this, props));\n\n    _this.state = {\n      disabledButton: true,\n      linkLoaded: false,\n      initializeURL: 'https://cdn.plaid.com/link/v2/stable/link-initialize.js'\n    };\n    _this.onScriptError = _this.onScriptError.bind(_this);\n    _this.onScriptLoaded = _this.onScriptLoaded.bind(_this);\n    _this.handleLinkOnLoad = _this.handleLinkOnLoad.bind(_this);\n    _this.handleOnClick = _this.handleOnClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(PlaidLink, [{\n    key: 'onScriptError',\n    value: function onScriptError() {\n      console.error('There was an issue loading the link-initialize.js script');\n    }\n  }, {\n    key: 'onScriptLoaded',\n    value: function onScriptLoaded() {\n      this.linkHandler = window.Plaid.create({\n        apiVersion: this.props.apiVersion,\n        clientName: this.props.clientName,\n        countryCodes: this.props.countryCodes,\n        language: this.props.language,\n        env: this.props.env,\n        key: this.props.publicKey,\n        onEvent: this.props.onEvent,\n        onExit: this.props.onExit,\n        onLoad: this.handleLinkOnLoad,\n        onSuccess: this.props.onSuccess,\n        product: this.props.product,\n        selectAccount: this.props.selectAccount,\n        token: this.props.token,\n        user: this.props.user,\n        webhook: this.props.webhook,\n        oauthNonce: this.props.oauthNonce,\n        oauthRedirectUri: this.props.oauthRedirectUri,\n        oauthStateId: this.props.oauthStateId,\n        paymentToken: this.props.paymentToken\n      });\n      this.setState({\n        disabledButton: false\n      });\n    }\n  }, {\n    key: 'handleLinkOnLoad',\n    value: function handleLinkOnLoad() {\n      if (this.props.onLoad != null) {\n        this.props.onLoad();\n      }\n\n      this.setState({\n        linkLoaded: true\n      });\n    }\n  }, {\n    key: 'handleOnClick',\n    value: function handleOnClick(event) {\n      if (this.props.onClick != null) {\n        this.props.onClick(event);\n      }\n\n      if (this.linkHandler) {\n        this.linkHandler.open();\n      }\n    }\n  }, {\n    key: 'exit',\n    value: function exit(configurationObject) {\n      if (this.linkHandler) {\n        this.linkHandler.exit(configurationObject);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement('div', null, _react2.default.createElement('button', {\n        onClick: this.handleOnClick,\n        disabled: this.state.disabledButton,\n        style: this.props.style,\n        className: this.props.className\n      }, this.props.children), _react2.default.createElement(_reactLoadScript2.default, {\n        url: this.state.initializeURL,\n        onError: this.onScriptError,\n        onLoad: this.onScriptLoaded\n      }));\n    }\n  }]);\n\n  return PlaidLink;\n}(_react.Component);\n\nPlaidLink.defaultProps = {\n  env: 'sandbox',\n  selectAccount: false,\n  token: null,\n  style: {\n    padding: '6px 4px',\n    outline: 'none',\n    background: '#FFFFFF',\n    border: '2px solid #F1F1F1',\n    borderRadius: '4px'\n  }\n};\nPlaidLink.propTypes = {\n  // ApiVersion flag to use new version of Plaid API\n  apiVersion: _propTypes2.default.string,\n  // Displayed once a user has successfully linked their account\n  clientName: _propTypes2.default.string.isRequired,\n  // List of countries to initialize Link with\n  countryCodes: _propTypes2.default.array,\n  // The Plaid API environment on which to create user accounts.\n  // For development and testing, use tartan. For production, use production\n  env: _propTypes2.default.oneOf(['tartan', 'sandbox', 'development', 'production']).isRequired,\n  // The public_key associated with your account; available from\n  // the Plaid dashboard (https://dashboard.plaid.com)\n  publicKey: _propTypes2.default.string.isRequired,\n  // The Plaid products you wish to use, an array containing some of connect,\n  // auth, identity, income, transactions, assets, liabilities\n  product: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['connect', // legacy product name\n  'info', // legacy product name\n  'auth', 'identity', 'income', 'transactions', 'assets', 'liabilities', 'investments', 'payment_initiation'])).isRequired,\n  // List of countries to initialize Link with\n  language: _propTypes2.default.string,\n  // Specify an existing user's public token to launch Link in update mode.\n  // This will cause Link to open directly to the authentication step for\n  // that user's institution.\n  token: _propTypes2.default.string,\n  // Specify a user object to enable all Auth features. Reach out to your\n  // account manager or integrations@plaid.com to get enabled. See the Auth\n  // [https://plaid.com/docs#auth] docs for integration details.\n  user: _propTypes2.default.shape({\n    // Your user's legal first and last name\n    legalName: _propTypes2.default.string,\n    // Your user's associated email address\n    emailAddress: _propTypes2.default.string\n  }),\n  // Set to true to launch Link with the 'Select Account' pane enabled.\n  // Allows users to select an individual account once they've authenticated\n  selectAccount: _propTypes2.default.bool,\n  // Specify a webhook to associate with a user.\n  webhook: _propTypes2.default.string,\n  // A function that is called when a user has successfully onboarded their\n  // account. The function should expect two arguments, the public_key and a\n  // metadata object\n  onSuccess: _propTypes2.default.func.isRequired,\n  // A function that is called when a user has specifically exited Link flow\n  onExit: _propTypes2.default.func,\n  // A function that is called when the Link module has finished loading.\n  // Calls to plaidLinkHandler.open() prior to the onLoad callback will be\n  // delayed until the module is fully loaded.\n  onLoad: _propTypes2.default.func,\n  // A function that is called during a user's flow in Link.\n  // See\n  onEvent: _propTypes2.default.func,\n  // Button Styles as an Object\n  style: _propTypes2.default.object,\n  // Button Class names as a String\n  className: _propTypes2.default.string,\n  // An oauthNonce is required to support OAuth authentication flows\n  // when configuring Plaid Link with one or more European country codes.\n  // For security, the nonce must be a unique identifier (such as a UUID)\n  // for each Link session and must be at least 16 characters long.\n  // For more information, see https://plaid.com/docs/#oauth.\n  oauthNonce: _propTypes2.default.string,\n  // An oauthRedirectUri is required to support OAuth authentication flows\n  // when configuring Plaid Link with one or more European country codes.\n  // After the user completes the OAuth flow, Plaid redirects back to the\n  // application via this URI. For security, the URI must be configured via\n  // the developer dashboard at https://dashboard.plaid.com/team/api.\n  // For more information, see https://plaid.com/docs/#oauth.\n  oauthRedirectUri: _propTypes2.default.string,\n  // An oauthStateId is required to support OAuth authentication flows\n  // when configuring Plaid Link with one or more European country codes.\n  // After the user completes the OAuth flow, when Plaid redirects back to\n  // the application, the redirect URI includes a query parameter called\n  // oauth_state_id. To complete the authentication flow, Link must be\n  // re-initialized with this query parameter, in addition to the nonce\n  // from the original Link configuration.\n  // For more information, see https://plaid.com/docs/#oauth.\n  oauthStateId: _propTypes2.default.string,\n  // A payment token is required when using the European Payment Initiation product.\n  paymentToken: _propTypes2.default.string\n};\nexports.default = PlaidLink;","map":null,"metadata":{},"sourceType":"script"}